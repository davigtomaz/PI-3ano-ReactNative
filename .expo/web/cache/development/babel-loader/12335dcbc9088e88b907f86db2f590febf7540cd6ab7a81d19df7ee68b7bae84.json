{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"variant\", \"color\", \"style\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport RNText from \"react-native-web/dist/exports/Text\";\nimport { useTheme } from \"./base/ThemeContext\";\nimport { usePaletteColor } from \"./hooks/use-palette-color\";\nvar Text = function Text(_ref) {\n  var _ref$variant = _ref.variant,\n    variant = _ref$variant === void 0 ? 'body1' : _ref$variant,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'on-background' : _ref$color,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useTheme = useTheme(),\n    typography = _useTheme.typography;\n  var palette = usePaletteColor(color);\n  return React.createElement(RNText, _extends({}, rest, {\n    style: [typography[variant], {\n      color: palette.main\n    }, style]\n  }));\n};\nexport default Text;","map":{"version":3,"names":["React","RNText","useTheme","usePaletteColor","Text","_ref","_ref$variant","variant","_ref$color","color","style","rest","_objectWithoutProperties","_excluded","_useTheme","typography","palette","createElement","_extends","main"],"sources":["/home/ariane.junkes/PI-3ano-ReactNative/node_modules/@react-native-material/core/lib/module/Text.tsx"],"sourcesContent":["import React from 'react';\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\nimport { TypographyVariant, useTheme } from './base/ThemeContext';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\n\nexport interface TextProps extends RNTextProps {\n  /**\n   * The variant of the text.\n   *\n   * @default \"body1\"\n   */\n  variant?: TypographyVariant;\n\n  /**\n   * The color of the text.\n   *\n   * @default \"on-background\"\n   */\n  color?: Color;\n}\n\nconst Text: React.FC<TextProps> = ({ variant = 'body1', color = 'on-background', style, ...rest }) => {\n  const { typography } = useTheme();\n  const palette = usePaletteColor(color);\n\n  return <RNText {...rest} style={[typography[variant], { color: palette.main }, style]} />;\n};\n\nexport default Text;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAAA,OAAAC,MAAA;AAEA,SAA4BC,QAA5B;AACA,SAAgBC,eAAhB;AAkBA,IAAMC,IAAyB,GAAG,SAA5BA,IAAyBA,CAAGC,IAAA,EAAoE;EAAA,IAAAC,YAAA,GAAAD,IAAA,CAAjEE,OAAO;IAAPA,OAAO,GAAAD,YAAA,cAAG,OAAZ,GAAAA,YAAA;IAAAE,UAAA,GAAmEH,IAAA,CAA9CI,KAAK;IAALA,KAAK,GAAAD,UAAA,cAAG,eAA7B,GAAAA,UAAA;IAA8CE,KAA9C,GAAmEL,IAAA,CAArBK,KAA9C;IAAwDC,IAAA,GAAAC,wBAAA,CAAWP,IAAA,EAAAQ,SAAA;EACpG,IAAAC,SAAA,GAAuBZ,QAAQ,EAA/B;IAAQa,UAAA,GAAAD,SAAA,CAAAC,UAAA;EACR,IAAMC,OAAO,GAAGb,eAAe,CAACM,KAAD,CAA/B;EAEA,OAAOT,KAAA,CAAAiB,aAAA,CAAChB,MAAD,EAAAiB,QAAA,KAAYP,IAAZ;IAAkBD,KAAK,EAAE,CAACK,UAAU,CAACR,OAAD,CAAX,EAAsB;MAAEE,KAAK,EAAEO,OAAO,CAACG;IAAjB,CAAtB,EAA+CT,KAA/C;EAAzB,GAAP;AACD,CALD;AAOA,eAAeN,IAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}