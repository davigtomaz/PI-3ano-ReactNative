{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\", \"clockType\", \"pressed\", \"onPress\", \"onChanged\", \"inputType\", \"inputFontSize\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useTheme, TouchableRipple } from 'react-native-paper';\nimport Color from 'color';\nimport { inputTypes, useInputColors } from \"./timeUtils\";\nfunction TimeInput(_ref, ref) {\n  var value = _ref.value,\n    clockType = _ref.clockType,\n    pressed = _ref.pressed,\n    _onPress = _ref.onPress,\n    onChanged = _ref.onChanged,\n    inputType = _ref.inputType,\n    _ref$inputFontSize = _ref.inputFontSize,\n    inputFontSize = _ref$inputFontSize === void 0 ? 57 : _ref$inputFontSize,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(\"\" + value),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    controlledValue = _React$useState2[0],\n    setControlledValue = _React$useState2[1];\n  var onInnerChange = function onInnerChange(text) {\n    setControlledValue(text);\n    if (text !== '' && text !== '0') {\n      onChanged(Number(text));\n    }\n  };\n  React.useEffect(function () {\n    setControlledValue(\"\" + value);\n  }, [value]);\n  var theme = useTheme();\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    inputFocused = _React$useState4[0],\n    setInputFocused = _React$useState4[1];\n  var highlighted = inputType === inputTypes.picker ? pressed : inputFocused;\n  var _useInputColors = useInputColors(highlighted),\n    color = _useInputColors.color,\n    backgroundColor = _useInputColors.backgroundColor;\n  var formattedValue = controlledValue;\n  if (!inputFocused) {\n    formattedValue = controlledValue.length === 1 ? \"0\" + controlledValue : \"\" + controlledValue;\n  }\n  return React.createElement(View, {\n    style: styles.root\n  }, React.createElement(TextInput, _extends({\n    ref: ref,\n    style: [styles.input, {\n      color: color,\n      fontSize: inputFontSize,\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness * 2,\n      borderColor: theme.isV3 && highlighted ? theme.colors.onPrimaryContainer : undefined,\n      borderWidth: theme.isV3 && highlighted ? 2 : 0,\n      height: inputType === inputTypes.keyboard ? 72 : 80\n    }],\n    maxFontSizeMultiplier: 1.5,\n    value: formattedValue,\n    maxLength: 2,\n    onFocus: function onFocus() {\n      return setInputFocused(true);\n    },\n    onBlur: function onBlur() {\n      return setInputFocused(false);\n    },\n    keyboardAppearance: theme.dark ? 'dark' : 'default',\n    keyboardType: \"number-pad\",\n    onChangeText: onInnerChange\n  }, rest)), _onPress && inputType === inputTypes.picker ? React.createElement(TouchableRipple, {\n    style: [StyleSheet.absoluteFill, styles.buttonOverlay, {\n      borderRadius: theme.roundness\n    }],\n    rippleColor: Platform.OS !== 'ios' ? Color(theme.colors.onSurface).fade(0.7).hex() : undefined,\n    onPress: function onPress() {\n      return _onPress(clockType);\n    },\n    borderless: true\n  }, React.createElement(View, null)) : null);\n}\nvar styles = StyleSheet.create({\n  root: {\n    position: 'relative',\n    height: 80,\n    width: 96\n  },\n  input: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    width: 96\n  },\n  buttonOverlay: {\n    overflow: 'hidden'\n  }\n});\nexport default React.forwardRef(TimeInput);","map":{"version":3,"names":["React","View","TextInput","StyleSheet","Platform","useTheme","TouchableRipple","Color","inputTypes","useInputColors","TimeInput","_ref","ref","value","clockType","pressed","onPress","onChanged","inputType","_ref$inputFontSize","inputFontSize","rest","_objectWithoutProperties","_excluded","_React$useState","useState","_React$useState2","_slicedToArray","controlledValue","setControlledValue","onInnerChange","text","Number","useEffect","theme","_React$useState3","_React$useState4","inputFocused","setInputFocused","highlighted","picker","_useInputColors","color","backgroundColor","formattedValue","length","createElement","style","styles","root","_extends","input","fontSize","borderRadius","roundness","borderColor","isV3","colors","onPrimaryContainer","undefined","borderWidth","height","keyboard","maxFontSizeMultiplier","maxLength","onFocus","onBlur","keyboardAppearance","dark","keyboardType","onChangeText","absoluteFill","buttonOverlay","rippleColor","OS","onSurface","fade","hex","borderless","create","position","width","textAlign","textAlignVertical","overflow","forwardRef"],"sources":["/home/davigtomaz/PI-3ano-ReactNative/node_modules/react-native-paper-dates/src/Time/TimeInput.tsx"],"sourcesContent":["import * as React from 'react'\nimport {\n  View,\n  TextInput,\n  TextInputProps,\n  StyleSheet,\n  Platform,\n} from 'react-native'\nimport { useTheme, TouchableRipple } from 'react-native-paper'\n\nimport Color from 'color'\nimport {\n  inputTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  useInputColors,\n} from './timeUtils'\n\ninterface TimeInputProps\n  extends Omit<Omit<TextInputProps, 'value'>, 'onFocus'> {\n  value: number\n  clockType: PossibleClockTypes\n  onPress?: (type: PossibleClockTypes) => any\n  pressed: boolean\n  onChanged: (n: number) => any\n  inputType: PossibleInputTypes\n  inputFontSize?: number\n}\n\nfunction TimeInput(\n  {\n    value,\n    clockType,\n    pressed,\n    onPress,\n    onChanged,\n    inputType,\n    inputFontSize = 57,\n    ...rest\n  }: TimeInputProps,\n  ref: any\n) {\n  const [controlledValue, setControlledValue] = React.useState<string>(\n    `${value}`\n  )\n\n  const onInnerChange = (text: string) => {\n    setControlledValue(text)\n    if (text !== '' && text !== '0') {\n      onChanged(Number(text))\n    }\n  }\n\n  React.useEffect(() => {\n    setControlledValue(`${value}`)\n  }, [value])\n\n  const theme = useTheme()\n  const [inputFocused, setInputFocused] = React.useState<boolean>(false)\n\n  const highlighted = inputType === inputTypes.picker ? pressed : inputFocused\n\n  const { color, backgroundColor } = useInputColors(highlighted)\n\n  let formattedValue = controlledValue\n  if (!inputFocused) {\n    formattedValue =\n      controlledValue.length === 1\n        ? `0${controlledValue}`\n        : `${controlledValue}`\n  }\n\n  return (\n    <View style={styles.root}>\n      <TextInput\n        ref={ref}\n        style={[\n          styles.input,\n          // eslint-disable-next-line react-native/no-inline-styles\n          {\n            color,\n            fontSize: inputFontSize,\n            backgroundColor,\n            borderRadius: theme.roundness * 2,\n            borderColor:\n              theme.isV3 && highlighted\n                ? theme.colors.onPrimaryContainer\n                : undefined,\n            borderWidth: theme.isV3 && highlighted ? 2 : 0,\n            height: inputType === inputTypes.keyboard ? 72 : 80,\n          },\n        ]}\n        maxFontSizeMultiplier={1.5}\n        value={formattedValue}\n        maxLength={2}\n        onFocus={() => setInputFocused(true)}\n        onBlur={() => setInputFocused(false)}\n        keyboardAppearance={theme.dark ? 'dark' : 'default'}\n        keyboardType=\"number-pad\"\n        onChangeText={onInnerChange}\n        {...rest}\n      />\n      {onPress && inputType === inputTypes.picker ? (\n        <TouchableRipple\n          style={[\n            StyleSheet.absoluteFill,\n            styles.buttonOverlay,\n            {\n              borderRadius: theme.roundness,\n            },\n          ]}\n          rippleColor={\n            Platform.OS !== 'ios'\n              ? Color(theme.colors.onSurface).fade(0.7).hex()\n              : undefined\n          }\n          onPress={() => onPress(clockType)}\n          borderless={true}\n        >\n          <View />\n        </TouchableRipple>\n      ) : null}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  root: { position: 'relative', height: 80, width: 96 },\n  input: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    width: 96,\n  },\n  buttonOverlay: { overflow: 'hidden' },\n})\n\nexport default React.forwardRef(TimeInput)\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,QAAA;AAQ9B,SAASC,QAAQ,EAAEC,eAAe,QAAQ,oBAAoB;AAE9D,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,UAAU,EAGVC,cAAc;AAchB,SAASC,SAASA,CAAAC,IAAA,EAWhBC,GAAQ,EACR;EAAA,IAVEC,KAAK,GAQUF,IAAA,CARfE,KAAK;IACLC,SAAS,GAOMH,IAAA,CAPfG,SAAS;IACTC,OAAO,GAMQJ,IAAA,CANfI,OAAO;IACPC,QAAO,GAKQL,IAAA,CALfK,OAAO;IACPC,SAAS,GAIMN,IAAA,CAJfM,SAAS;IACTC,SAAS,GAGMP,IAAA,CAHfO,SAAS;IAAAC,kBAAA,GAGMR,IAAA,CAFfS,aAAa;IAAbA,aAAa,GAAAD,kBAAA,cAAG,EAAE,GAAAA,kBAAA;IACfE,IAAA,GAAAC,wBAAA,CACYX,IAAA,EAAAY,SAAA;EAGjB,IAAAC,eAAA,GAA8CxB,KAAK,CAACyB,QAAQ,MACvDZ,KAAM,CACV;IAAAa,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAFMI,eAAe,GAAAF,gBAAA;IAAEG,kBAAkB,GAAAH,gBAAA;EAI1C,IAAMI,aAAa,GAAI,SAAjBA,aAAaA,CAAIC,IAAY,EAAK;IACtCF,kBAAkB,CAACE,IAAI,CAAC;IACxB,IAAIA,IAAI,KAAK,EAAE,IAAIA,IAAI,KAAK,GAAG,EAAE;MAC/Bd,SAAS,CAACe,MAAM,CAACD,IAAI,CAAC,CAAC;IACzB;EACF,CAAC;EAED/B,KAAK,CAACiC,SAAS,CAAC,YAAM;IACpBJ,kBAAkB,MAAIhB,KAAM,CAAE;EAChC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,IAAMqB,KAAK,GAAG7B,QAAQ,EAAE;EACxB,IAAA8B,gBAAA,GAAwCnC,KAAK,CAACyB,QAAQ,CAAU,KAAK,CAAC;IAAAW,gBAAA,GAAAT,cAAA,CAAAQ,gBAAA;IAA/DE,YAAY,GAAAD,gBAAA;IAAEE,eAAe,GAAAF,gBAAA;EAEpC,IAAMG,WAAW,GAAGrB,SAAS,KAAKV,UAAU,CAACgC,MAAM,GAAGzB,OAAO,GAAGsB,YAAY;EAE5E,IAAAI,eAAA,GAAmChC,cAAc,CAAC8B,WAAW,CAAC;IAAtDG,KAAK,GAAAD,eAAA,CAALC,KAAK;IAAEC,eAAA,GAAAF,eAAA,CAAAE,eAAA;EAEf,IAAIC,cAAc,GAAGhB,eAAe;EACpC,IAAI,CAACS,YAAY,EAAE;IACjBO,cAAc,GACZhB,eAAe,CAACiB,MAAM,KAAK,CAAC,SACpBjB,eAAgB,QACjBA,eAAiB;EAC5B;EAEA,OACE5B,KAAA,CAAA8C,aAAA,CAAC7C,IAAI;IAAC8C,KAAK,EAAEC,MAAM,CAACC;EAAK,GACvBjD,KAAA,CAAA8C,aAAA,CAAC5C,SAAS,EAAAgD,QAAA;IACRtC,GAAG,EAAEA,GAAI;IACTmC,KAAK,EAAE,CACLC,MAAM,CAACG,KAAK,EAEZ;MACET,KAAK,EAALA,KAAK;MACLU,QAAQ,EAAEhC,aAAa;MACvBuB,eAAe,EAAfA,eAAe;MACfU,YAAY,EAAEnB,KAAK,CAACoB,SAAS,GAAG,CAAC;MACjCC,WAAW,EACTrB,KAAK,CAACsB,IAAI,IAAIjB,WAAW,GACrBL,KAAK,CAACuB,MAAM,CAACC,kBAAkB,GAC/BC,SAAS;MACfC,WAAW,EAAE1B,KAAK,CAACsB,IAAI,IAAIjB,WAAW,GAAG,CAAC,GAAG,CAAC;MAC9CsB,MAAM,EAAE3C,SAAS,KAAKV,UAAU,CAACsD,QAAQ,GAAG,EAAE,GAAG;IACnD,CAAC,CACD;IACFC,qBAAqB,EAAE,GAAI;IAC3BlD,KAAK,EAAE+B,cAAe;IACtBoB,SAAS,EAAE,CAAE;IACbC,OAAO,EAAE,SAAAA,QAAA;MAAA,OAAM3B,eAAe,CAAC,IAAI,CAAE;IAAA;IACrC4B,MAAM,EAAE,SAAAA,OAAA;MAAA,OAAM5B,eAAe,CAAC,KAAK,CAAE;IAAA;IACrC6B,kBAAkB,EAAEjC,KAAK,CAACkC,IAAI,GAAG,MAAM,GAAG,SAAU;IACpDC,YAAY,EAAC,YAAY;IACzBC,YAAY,EAAExC;EAAc,GACxBT,IAAI,CACT,CAAC,EACDL,QAAO,IAAIE,SAAS,KAAKV,UAAU,CAACgC,MAAM,GACzCxC,KAAA,CAAA8C,aAAA,CAACxC,eAAe;IACdyC,KAAK,EAAE,CACL5C,UAAU,CAACoE,YAAY,EACvBvB,MAAM,CAACwB,aAAa,EACpB;MACEnB,YAAY,EAAEnB,KAAK,CAACoB;IACtB,CAAC,CACD;IACFmB,WAAW,EACTrE,QAAQ,CAACsE,EAAE,KAAK,KAAK,GACjBnE,KAAK,CAAC2B,KAAK,CAACuB,MAAM,CAACkB,SAAS,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE,GAC7ClB,SACL;IACD3C,OAAO,EAAE,SAAAA,QAAA;MAAA,OAAMA,QAAO,CAACF,SAAS,CAAE;IAAA;IAClCgE,UAAU,EAAE;EAAK,GAEjB9E,KAAA,CAAA8C,aAAA,CAAC7C,IAAI,MAAE,CACQ,CAAC,GAChB,IACA,CAAC;AAEX;AAEA,IAAM+C,MAAM,GAAG7C,UAAU,CAAC4E,MAAM,CAAC;EAC/B9B,IAAI,EAAE;IAAE+B,QAAQ,EAAE,UAAU;IAAEnB,MAAM,EAAE,EAAE;IAAEoB,KAAK,EAAE;EAAG,CAAC;EACrD9B,KAAK,EAAE;IACL+B,SAAS,EAAE,QAAQ;IACnBC,iBAAiB,EAAE,QAAQ;IAC3BF,KAAK,EAAE;EACT,CAAC;EACDT,aAAa,EAAE;IAAEY,QAAQ,EAAE;EAAS;AACtC,CAAC,CAAC;AAEF,eAAepF,KAAK,CAACqF,UAAU,CAAC3E,SAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}