{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { Text, useTheme } from 'react-native-paper';\nimport { clockTypes, toHourInputFormat, toHourOutputFormat } from \"./timeUtils\";\nimport TimeInput from \"./TimeInput\";\nimport AmPmSwitcher from \"./AmPmSwitcher\";\nimport { useLatest } from \"../utils\";\nimport Color from 'color';\nfunction TimeInputs(_ref) {\n  var hours = _ref.hours,\n    minutes = _ref.minutes,\n    onFocusInput = _ref.onFocusInput,\n    focused = _ref.focused,\n    inputType = _ref.inputType,\n    onChange = _ref.onChange,\n    is24Hour = _ref.is24Hour,\n    inputFontSize = _ref.inputFontSize;\n  var startInput = React.useRef(null);\n  var endInput = React.useRef(null);\n  var dimensions = useWindowDimensions();\n  var isLandscape = dimensions.width > dimensions.height;\n  var theme = useTheme();\n  var onSubmitStartInput = React.useCallback(function () {\n    if (endInput.current) {\n      endInput.current.focus();\n    }\n  }, [endInput]);\n  var onSubmitEndInput = React.useCallback(function () {}, []);\n  var minutesRef = useLatest(minutes);\n  var onChangeHours = React.useCallback(function (newHours) {\n    onChange({\n      hours: newHours,\n      minutes: minutesRef.current,\n      focused: clockTypes.hours\n    });\n  }, [onChange, minutesRef]);\n  return React.createElement(View, {\n    style: [styles.inputContainer, isLandscape && styles.inputContainerLandscape]\n  }, React.createElement(View, {\n    style: styles.column\n  }, React.createElement(TimeInput, {\n    ref: startInput,\n    inputFontSize: inputFontSize,\n    placeholder: '00',\n    value: toHourInputFormat(hours, is24Hour),\n    clockType: clockTypes.hours,\n    pressed: focused === clockTypes.hours,\n    onPress: onFocusInput,\n    inputType: inputType,\n    maxFontSizeMultiplier: 1.2,\n    selectionColor: theme.dark ? Color(theme.colors.primary).darken(0.2).hex() : theme.colors.primary,\n    returnKeyType: 'next',\n    onSubmitEditing: onSubmitStartInput,\n    blurOnSubmit: false,\n    onChanged: function onChanged(newHoursFromInput) {\n      var newHours = toHourOutputFormat(newHoursFromInput, hours, is24Hour);\n      if (newHoursFromInput > 24) {\n        newHours = 24;\n      }\n      onChange({\n        hours: newHours,\n        minutes: minutes\n      });\n    }\n  }), inputType === 'keyboard' ? React.createElement(Text, {\n    maxFontSizeMultiplier: 1.5,\n    variant: \"bodySmall\"\n  }, \"Hour\") : null), React.createElement(View, {\n    style: [styles.hoursAndMinutesSeparator, {\n      marginBottom: inputType === 'keyboard' ? 24 : 0\n    }]\n  }, React.createElement(View, {\n    style: styles.spaceDot\n  }), React.createElement(View, {\n    style: [styles.dot, {\n      backgroundColor: theme !== null && theme !== void 0 && theme.isV3 ? theme.colors.onSurface : theme.colors.text\n    }]\n  }), React.createElement(View, {\n    style: styles.betweenDot\n  }), React.createElement(View, {\n    style: [styles.dot, {\n      backgroundColor: theme !== null && theme !== void 0 && theme.isV3 ? theme.colors.onSurface : theme.colors.text\n    }]\n  }), React.createElement(View, {\n    style: styles.spaceDot\n  })), React.createElement(View, {\n    style: styles.column\n  }, React.createElement(TimeInput, {\n    ref: endInput,\n    inputFontSize: inputFontSize,\n    placeholder: '00',\n    value: minutes,\n    clockType: clockTypes.minutes,\n    pressed: focused === clockTypes.minutes,\n    onPress: onFocusInput,\n    inputType: inputType,\n    maxFontSizeMultiplier: 1.2,\n    selectionColor: theme.dark ? Color(theme.colors.primary).darken(0.2).hex() : theme.colors.primary,\n    onSubmitEditing: onSubmitEndInput,\n    onChanged: function onChanged(newMinutesFromInput) {\n      var newMinutes = newMinutesFromInput;\n      if (newMinutesFromInput > 59) {\n        newMinutes = 59;\n      }\n      onChange({\n        hours: hours,\n        minutes: newMinutes\n      });\n    }\n  }), inputType === 'keyboard' ? React.createElement(Text, {\n    maxFontSizeMultiplier: 1.5,\n    variant: \"bodySmall\"\n  }, \"Minute\") : null), !is24Hour && React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.spaceBetweenInputsAndSwitcher\n  }), React.createElement(AmPmSwitcher, {\n    hours: hours,\n    onChange: onChangeHours,\n    inputType: inputType\n  })));\n}\nvar styles = StyleSheet.create({\n  column: {\n    flexDirection: 'column'\n  },\n  spaceBetweenInputsAndSwitcher: {\n    width: 12\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  inputContainerLandscape: {\n    flex: 1\n  },\n  hoursAndMinutesSeparator: {\n    fontSize: 65,\n    width: 24,\n    alignItems: 'center'\n  },\n  spaceDot: {\n    flex: 1\n  },\n  dot: {\n    width: 7,\n    height: 7,\n    borderRadius: 7 / 2\n  },\n  betweenDot: {\n    height: 12\n  }\n});\nexport default React.memo(TimeInputs);","map":{"version":3,"names":["React","View","StyleSheet","useWindowDimensions","Text","useTheme","clockTypes","toHourInputFormat","toHourOutputFormat","TimeInput","AmPmSwitcher","useLatest","Color","TimeInputs","_ref","hours","minutes","onFocusInput","focused","inputType","onChange","is24Hour","inputFontSize","startInput","useRef","endInput","dimensions","isLandscape","width","height","theme","onSubmitStartInput","useCallback","current","focus","onSubmitEndInput","minutesRef","onChangeHours","newHours","createElement","style","styles","inputContainer","inputContainerLandscape","column","ref","placeholder","value","clockType","pressed","onPress","maxFontSizeMultiplier","selectionColor","dark","colors","primary","darken","hex","returnKeyType","onSubmitEditing","blurOnSubmit","onChanged","newHoursFromInput","variant","hoursAndMinutesSeparator","marginBottom","spaceDot","dot","backgroundColor","isV3","onSurface","text","betweenDot","newMinutesFromInput","newMinutes","Fragment","spaceBetweenInputsAndSwitcher","create","flexDirection","alignItems","flex","fontSize","borderRadius","memo"],"sources":["/home/davigtomaz/PI-3ano-ReactNative/node_modules/react-native-paper-dates/src/Time/TimeInputs.tsx"],"sourcesContent":["import * as React from 'react'\nimport {\n  View,\n  StyleSheet,\n  useWindowDimensions,\n  TextInput as TextInputNative,\n} from 'react-native'\nimport { MD2Theme, Text, useTheme } from 'react-native-paper'\n\nimport {\n  clockTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  toHourInputFormat,\n  toHourOutputFormat,\n} from './timeUtils'\nimport TimeInput from './TimeInput'\nimport AmPmSwitcher from './AmPmSwitcher'\nimport { useLatest } from '../utils'\nimport Color from 'color'\n\nfunction TimeInputs({\n  hours,\n  minutes,\n  onFocusInput,\n  focused,\n  inputType,\n  onChange,\n  is24Hour,\n  inputFontSize,\n}: {\n  inputType: PossibleInputTypes\n  focused: PossibleClockTypes\n  hours: number\n  minutes: number\n  onFocusInput: (type: PossibleClockTypes) => any\n  onChange: (hoursMinutesAndFocused: {\n    hours: number\n    minutes: number\n    focused?: undefined | PossibleClockTypes\n  }) => any\n  is24Hour: boolean\n  inputFontSize?: number\n}) {\n  const startInput = React.useRef<TextInputNative | null>(null)\n  const endInput = React.useRef<TextInputNative | null>(null)\n  const dimensions = useWindowDimensions()\n  const isLandscape = dimensions.width > dimensions.height\n  const theme = useTheme()\n\n  const onSubmitStartInput = React.useCallback(() => {\n    if (endInput.current) {\n      endInput.current.focus()\n    }\n  }, [endInput])\n\n  const onSubmitEndInput = React.useCallback(() => {\n    // TODO: close modal and persist time\n  }, [])\n\n  const minutesRef = useLatest(minutes)\n  const onChangeHours = React.useCallback(\n    (newHours: number) => {\n      onChange({\n        hours: newHours,\n        minutes: minutesRef.current,\n        focused: clockTypes.hours,\n      })\n    },\n    [onChange, minutesRef]\n  )\n\n  return (\n    <View\n      style={[\n        styles.inputContainer,\n        isLandscape && styles.inputContainerLandscape,\n      ]}\n    >\n      <View style={styles.column}>\n        <TimeInput\n          ref={startInput}\n          inputFontSize={inputFontSize}\n          placeholder={'00'}\n          value={toHourInputFormat(hours, is24Hour)}\n          clockType={clockTypes.hours}\n          pressed={focused === clockTypes.hours}\n          onPress={onFocusInput}\n          inputType={inputType}\n          maxFontSizeMultiplier={1.2}\n          selectionColor={\n            theme.dark\n              ? Color(theme.colors.primary).darken(0.2).hex()\n              : theme.colors.primary\n          }\n          returnKeyType={'next'}\n          onSubmitEditing={onSubmitStartInput}\n          blurOnSubmit={false}\n          onChanged={(newHoursFromInput) => {\n            let newHours = toHourOutputFormat(\n              newHoursFromInput,\n              hours,\n              is24Hour\n            )\n            if (newHoursFromInput > 24) {\n              newHours = 24\n            }\n            onChange({\n              hours: newHours,\n              minutes,\n            })\n          }}\n        />\n        {inputType === 'keyboard' ? (\n          <Text maxFontSizeMultiplier={1.5} variant=\"bodySmall\">\n            Hour\n          </Text>\n        ) : null}\n      </View>\n      <View\n        style={[\n          styles.hoursAndMinutesSeparator,\n          // eslint-disable-next-line react-native/no-inline-styles\n          { marginBottom: inputType === 'keyboard' ? 24 : 0 },\n        ]}\n      >\n        <View style={styles.spaceDot} />\n        <View\n          style={[\n            styles.dot,\n            {\n              backgroundColor: theme?.isV3\n                ? theme.colors.onSurface\n                : (theme as any as MD2Theme).colors.text,\n            },\n          ]}\n        />\n        <View style={styles.betweenDot} />\n        <View\n          style={[\n            styles.dot,\n            {\n              backgroundColor: theme?.isV3\n                ? theme.colors.onSurface\n                : (theme as any as MD2Theme).colors.text,\n            },\n          ]}\n        />\n        <View style={styles.spaceDot} />\n      </View>\n      <View style={styles.column}>\n        <TimeInput\n          ref={endInput}\n          inputFontSize={inputFontSize}\n          placeholder={'00'}\n          value={minutes}\n          clockType={clockTypes.minutes}\n          pressed={focused === clockTypes.minutes}\n          onPress={onFocusInput}\n          inputType={inputType}\n          maxFontSizeMultiplier={1.2}\n          selectionColor={\n            theme.dark\n              ? Color(theme.colors.primary).darken(0.2).hex()\n              : theme.colors.primary\n          }\n          onSubmitEditing={onSubmitEndInput}\n          onChanged={(newMinutesFromInput) => {\n            let newMinutes = newMinutesFromInput\n            if (newMinutesFromInput > 59) {\n              newMinutes = 59\n            }\n            onChange({\n              hours,\n              minutes: newMinutes,\n            })\n          }}\n        />\n        {inputType === 'keyboard' ? (\n          <Text maxFontSizeMultiplier={1.5} variant=\"bodySmall\">\n            Minute\n          </Text>\n        ) : null}\n      </View>\n      {!is24Hour && (\n        <>\n          <View style={styles.spaceBetweenInputsAndSwitcher} />\n          <AmPmSwitcher\n            hours={hours}\n            onChange={onChangeHours}\n            inputType={inputType}\n          />\n        </>\n      )}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  column: {\n    flexDirection: 'column',\n  },\n  spaceBetweenInputsAndSwitcher: { width: 12 },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  inputContainerLandscape: {\n    flex: 1,\n  },\n  hoursAndMinutesSeparator: {\n    fontSize: 65,\n    width: 24,\n    alignItems: 'center',\n  },\n  spaceDot: {\n    flex: 1,\n  },\n  dot: {\n    width: 7,\n    height: 7,\n    borderRadius: 7 / 2,\n  },\n  betweenDot: {\n    height: 12,\n  },\n})\n\nexport default React.memo(TimeInputs)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}