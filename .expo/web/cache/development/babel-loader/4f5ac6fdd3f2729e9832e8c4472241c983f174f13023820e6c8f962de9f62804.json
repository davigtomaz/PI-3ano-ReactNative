{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nvar DEG_TO_RAD = Math.PI / 180;\nvar Matrix2D = _createClass(function Matrix2D(_a, _b, _c, _d, _tx, _ty) {\n  _classCallCheck(this, Matrix2D);\n  this.setTransform = function (a, b, c, d, tx, ty) {\n    this.a = a === null || a === undefined ? 1 : a;\n    this.b = b || 0;\n    this.c = c || 0;\n    this.d = d === null || d === undefined ? 1 : d;\n    this.tx = tx || 0;\n    this.ty = ty || 0;\n    return this;\n  };\n  this.reset = function () {\n    this.a = this.d = 1;\n    this.b = this.c = this.tx = this.ty = 0;\n    return this;\n  };\n  this.toArray = function () {\n    return [this.a, this.b, this.c, this.d, this.tx, this.ty];\n  };\n  this.copy = function (matrix) {\n    return this.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n  };\n  this.clone = function () {\n    return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\n  };\n  this.prepend = function (a, b, c, d, tx, ty) {\n    var a1 = this.a;\n    var c1 = this.c;\n    var tx1 = this.tx;\n    this.a = a * a1 + c * this.b;\n    this.b = b * a1 + d * this.b;\n    this.c = a * c1 + c * this.d;\n    this.d = b * c1 + d * this.d;\n    this.tx = a * tx1 + c * this.ty + tx;\n    this.ty = b * tx1 + d * this.ty + ty;\n    return this;\n  };\n  this.append = function (a, b, c, d, tx, ty) {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n    if (a !== 1 || b !== 0 || c !== 0 || d !== 1) {\n      this.a = a1 * a + c1 * b;\n      this.b = b1 * a + d1 * b;\n      this.c = a1 * c + c1 * d;\n      this.d = b1 * c + d1 * d;\n    }\n    this.tx = a1 * tx + c1 * ty + this.tx;\n    this.ty = b1 * tx + d1 * ty + this.ty;\n    return this;\n  };\n  this.appendTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    var cos, sin;\n    if (rotation % 360) {\n      var r = rotation * DEG_TO_RAD;\n      cos = Math.cos(r);\n      sin = Math.sin(r);\n    } else {\n      cos = 1;\n      sin = 0;\n    }\n    if (skewX || skewY) {\n      skewX *= DEG_TO_RAD;\n      skewY *= DEG_TO_RAD;\n      this.append(Math.cos(skewY), Math.sin(skewY), Math.sin(skewX), Math.cos(skewX), x, y);\n      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\n    } else {\n      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\n    }\n    if (regX || regY) {\n      this.tx -= regX * this.a + regY * this.c;\n      this.ty -= regX * this.b + regY * this.d;\n    }\n    return this;\n  };\n  this.prependTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    var cos, sin;\n    if (rotation % 360) {\n      var r = rotation * DEG_TO_RAD;\n      cos = Math.cos(r);\n      sin = Math.sin(r);\n    } else {\n      cos = 1;\n      sin = 0;\n    }\n    if (regX || regY) {\n      this.tx -= regX;\n      this.ty -= regY;\n    }\n    if (skewX || skewY) {\n      skewX *= DEG_TO_RAD;\n      skewY *= DEG_TO_RAD;\n      this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\n      this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n    } else {\n      this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\n    }\n    return this;\n  };\n  this.setTransform(_a, _b, _c, _d, _tx, _ty);\n});\nexport { Matrix2D as default };","map":{"version":3,"names":["DEG_TO_RAD","Math","PI","Matrix2D","_createClass","a","b","c","d","tx","ty","_classCallCheck","setTransform","undefined","reset","toArray","copy","matrix","clone","prepend","a1","c1","tx1","append","b1","d1","appendTransform","x","y","scaleX","scaleY","rotation","skewX","skewY","regX","regY","cos","sin","r","prependTransform","default"],"sources":["/home/davigtomaz/PI-3ano-ReactNative/node_modules/react-native-svg/lib/Matrix2D.js"],"sourcesContent":["/**\n * based on\n * https://github.com/CreateJS/EaselJS/blob/631cdffb85eff9413dab43b4676f059b4232d291/src/easeljs/geom/Matrix2D.js\n */\nconst DEG_TO_RAD = Math.PI / 180;\n\n/**\n * Represents an affine transformation matrix, and provides tools for constructing and concatenating matrices.\n *\n * This matrix can be visualized as:\n *\n * \t[ a  c  tx\n * \t  b  d  ty\n * \t  0  0  1  ]\n *\n * Note the locations of b and c.\n *\n * @class Matrix2D\n * @param {Number} [a=1] Specifies the a property for the new matrix.\n * @param {Number} [b=0] Specifies the b property for the new matrix.\n * @param {Number} [c=0] Specifies the c property for the new matrix.\n * @param {Number} [d=1] Specifies the d property for the new matrix.\n * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n * @constructor\n **/\nexport default class Matrix2D {\n    constructor(a, b, c, d, tx, ty) {\n        this.setTransform(a, b, c, d, tx, ty);\n\n        // public properties:\n        // assigned in the setValues method.\n        /**\n         * Position (0, 0) in a 3x3 affine transformation matrix.\n         * @property a\n         * @type Number\n         **/\n\n        /**\n         * Position (0, 1) in a 3x3 affine transformation matrix.\n         * @property b\n         * @type Number\n         **/\n\n        /**\n         * Position (1, 0) in a 3x3 affine transformation matrix.\n         * @property c\n         * @type Number\n         **/\n\n        /**\n         * Position (1, 1) in a 3x3 affine transformation matrix.\n         * @property d\n         * @type Number\n         **/\n\n        /**\n         * Position (2, 0) in a 3x3 affine transformation matrix.\n         * @property tx\n         * @type Number\n         **/\n\n        /**\n         * Position (2, 1) in a 3x3 affine transformation matrix.\n         * @property ty\n         * @type Number\n         **/\n    }\n\n    /**\n     * Set current matrix to new absolute matrix.\n     * @method setTransform\n     * @param {Number} [a=1] Specifies the a property for the new matrix.\n     * @param {Number} [b=0] Specifies the b property for the new matrix.\n     * @param {Number} [c=0] Specifies the c property for the new matrix.\n     * @param {Number} [d=1] Specifies the d property for the new matrix.\n     * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n     * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n     * @return {Matrix2D} This instance. Useful for chaining method calls.\n     */\n    setTransform = function(a, b, c, d, tx, ty) {\n        this.a = a === null || a === undefined ? 1 : a;\n        this.b = b || 0;\n        this.c = c || 0;\n        this.d = d === null || d === undefined ? 1 : d;\n        this.tx = tx || 0;\n        this.ty = ty || 0;\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    /**\n     * Reset current matrix to an identity matrix.\n     * @method reset\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    reset = function() {\n        this.a = this.d = 1;\n        this.b = this.c = this.tx = this.ty = 0;\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    /**\n     * Returns an array with current matrix values.\n     * @method toArray\n     * @return {Array} an array with current matrix values.\n     **/\n    toArray = function() {\n        return [this.a, this.b, this.c, this.d, this.tx, this.ty];\n    };\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Copies all properties from the specified matrix to this matrix.\n     * @method copy\n     * @param {Matrix2D} matrix The matrix to copy properties from.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     */\n    copy = function(matrix) {\n        //noinspection JSUnresolvedVariable\n        return this.setTransform(\n            matrix.a,\n            matrix.b,\n            matrix.c,\n            matrix.d,\n            matrix.tx,\n            matrix.ty\n        );\n    };\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Clones current instance and returning a new matrix.\n     * @method clone\n     * @return {Matrix2D} a clone of the Matrix2D instance.\n     **/\n    clone = function() {\n        return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\n    };\n\n    /**\n     * Prepends the specified matrix properties to this matrix.\n     * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n     * All parameters are required.\n     * @method prepend\n     * @param {Number} a\n     * @param {Number} b\n     * @param {Number} c\n     * @param {Number} d\n     * @param {Number} tx\n     * @param {Number} ty\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    prepend = function(a, b, c, d, tx, ty) {\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = a * a1 + c * this.b;\n        this.b = b * a1 + d * this.b;\n        this.c = a * c1 + c * this.d;\n        this.d = b * c1 + d * this.d;\n        this.tx = a * tx1 + c * this.ty + tx;\n        this.ty = b * tx1 + d * this.ty + ty;\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    /**\n     * Appends the specified matrix properties to this matrix. All parameters are required.\n     * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n     * @method append\n     * @param {Number} a\n     * @param {Number} b\n     * @param {Number} c\n     * @param {Number} d\n     * @param {Number} tx\n     * @param {Number} ty\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    append = function(a, b, c, d, tx, ty) {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        if (a !== 1 || b !== 0 || c !== 0 || d !== 1) {\n            this.a = a1 * a + c1 * b;\n            this.b = b1 * a + d1 * b;\n            this.c = a1 * c + c1 * d;\n            this.d = b1 * c + d1 * d;\n        }\n        this.tx = a1 * tx + c1 * ty + this.tx;\n        this.ty = b1 * tx + d1 * ty + this.ty;\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    /**\n     * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n     * For example, you can use this to generate a matrix representing the transformations of a display object:\n     *\n     * \tvar mtx = new createjs.Matrix2D();\n     * \tmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n     * @method appendTransform\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} scaleX\n     * @param {Number} scaleY\n     * @param {Number} rotation\n     * @param {Number} skewX\n     * @param {Number} skewY\n     * @param {Number} regX Optional.\n     * @param {Number} regY Optional.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    appendTransform = function(\n        x,\n        y,\n        scaleX,\n        scaleY,\n        rotation,\n        skewX,\n        skewY,\n        regX,\n        regY\n    ) {\n        let cos, sin;\n        if (rotation % 360) {\n            const r = rotation * DEG_TO_RAD;\n            cos = Math.cos(r);\n            sin = Math.sin(r);\n        } else {\n            cos = 1;\n            sin = 0;\n        }\n\n        if (skewX || skewY) {\n            // TODO: can this be combined into a single append operation?\n            skewX *= DEG_TO_RAD;\n            skewY *= DEG_TO_RAD;\n            this.append(\n                Math.cos(skewY),\n                Math.sin(skewY),\n                Math.sin(skewX),\n                Math.cos(skewX),\n                x,\n                y\n            );\n            this.append(\n                cos * scaleX,\n                sin * scaleX,\n                -sin * scaleY,\n                cos * scaleY,\n                0,\n                0\n            );\n        } else {\n            this.append(\n                cos * scaleX,\n                sin * scaleX,\n                -sin * scaleY,\n                cos * scaleY,\n                x,\n                y\n            );\n        }\n\n        if (regX || regY) {\n            // append the registration offset:\n            this.tx -= regX * this.a + regY * this.c;\n            this.ty -= regX * this.b + regY * this.d;\n        }\n        //noinspection JSValidateTypes\n        return this;\n    };\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Generates matrix properties from the specified display object transform properties, and prepends them to this matrix.\n     * For example, you could calculate the combined transformation for a child object using:\n     *\n     * \tvar o = myDisplayObject;\n     * \tvar mtx = new createjs.Matrix2D();\n     * \tdo  {\n     * \t\t// prepend each parent's transformation in turn:\n     * \t\tmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n     * \t} while (o = o.parent);\n     *\n     * \tNote that the above example would not account for {{#crossLink \"DisplayObject/transformMatrix:property\"}}{{/crossLink}}\n     * \tvalues. See {{#crossLink \"Matrix2D/prependMatrix\"}}{{/crossLink}} for an example that does.\n     * @method prependTransform\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} scaleX\n     * @param {Number} scaleY\n     * @param {Number} rotation\n     * @param {Number} skewX\n     * @param {Number} skewY\n     * @param {Number} regX Optional.\n     * @param {Number} regY Optional.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    prependTransform = function(\n        x,\n        y,\n        scaleX,\n        scaleY,\n        rotation,\n        skewX,\n        skewY,\n        regX,\n        regY\n    ) {\n        let cos, sin;\n        if (rotation % 360) {\n            const r = rotation * DEG_TO_RAD;\n            cos = Math.cos(r);\n            sin = Math.sin(r);\n        } else {\n            cos = 1;\n            sin = 0;\n        }\n\n        if (regX || regY) {\n            // prepend the registration offset:\n            this.tx -= regX;\n            this.ty -= regY;\n        }\n        if (skewX || skewY) {\n            // TODO: can this be combined into a single prepend operation?\n            skewX *= DEG_TO_RAD;\n            skewY *= DEG_TO_RAD;\n            this.prepend(\n                cos * scaleX,\n                sin * scaleX,\n                -sin * scaleY,\n                cos * scaleY,\n                0,\n                0\n            );\n            this.prepend(\n                Math.cos(skewY),\n                Math.sin(skewY),\n                -Math.sin(skewX),\n                Math.cos(skewX),\n                x,\n                y\n            );\n        } else {\n            this.prepend(\n                cos * scaleX,\n                sin * scaleX,\n                -sin * scaleY,\n                cos * scaleY,\n                x,\n                y\n            );\n        }\n        //noinspection JSValidateTypes\n        return this;\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}