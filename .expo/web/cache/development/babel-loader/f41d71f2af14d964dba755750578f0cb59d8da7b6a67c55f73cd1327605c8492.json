{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _ from \"lodash\";\nimport React, { Children } from \"react\";\nimport extractLengthList from \"./extractLengthList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar fontRegExp = /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?[ptexm%])*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nvar fontFamilyPrefix = /^[\\s\"']*/;\nvar fontFamilySuffix = /[\\s\"']*$/;\nvar commaReg = /\\s*,\\s*/g;\nvar cachedFontObjectsFromString = {};\nfunction extractSingleFontFamily(fontFamilyString) {\n  return fontFamilyString ? fontFamilyString.split(commaReg)[0].replace(fontFamilyPrefix, \"\").replace(fontFamilySuffix, \"\") : null;\n}\nfunction parseFontString(font) {\n  if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n    return cachedFontObjectsFromString[font];\n  }\n  var match = fontRegExp.exec(font);\n  if (!match) {\n    return null;\n  }\n  var fontFamily = extractSingleFontFamily(match[3]);\n  var fontSize = match[2] || \"12\";\n  var isBold = /bold/.exec(match[1]);\n  var isItalic = /italic/.exec(match[1]);\n  var fontWeight = isBold ? \"bold\" : \"normal\";\n  var fontStyle = isItalic ? \"italic\" : \"normal\";\n  cachedFontObjectsFromString[font] = {\n    fontSize: fontSize,\n    fontFamily: fontFamily,\n    fontWeight: fontWeight,\n    fontStyle: fontStyle\n  };\n  return cachedFontObjectsFromString[font];\n}\nexport function extractFont(prop) {\n  var props = _objectSpread(_objectSpread({}, prop.style), prop);\n  var fontData = props.fontData,\n    fontStyle = props.fontStyle,\n    fontVariant = props.fontVariant,\n    fontWeight = props.fontWeight,\n    fontStretch = props.fontStretch,\n    textAnchor = props.textAnchor,\n    textDecoration = props.textDecoration,\n    letterSpacing = props.letterSpacing,\n    wordSpacing = props.wordSpacing,\n    kerning = props.kerning,\n    fontVariantLigatures = props.fontVariantLigatures,\n    fontFeatureSettings = props.fontFeatureSettings;\n  var fontSize = props.fontSize,\n    fontFamily = props.fontFamily,\n    font = props.font;\n  fontFamily = extractSingleFontFamily(fontFamily);\n  fontSize = fontSize ? \"\" + fontSize : null;\n  var ownedFont = _.pickBy({\n    fontData: fontData,\n    fontStyle: fontStyle,\n    fontVariant: fontVariant,\n    fontWeight: fontWeight,\n    fontStretch: fontStretch,\n    fontSize: fontSize,\n    fontFamily: fontFamily,\n    textAnchor: textAnchor,\n    textDecoration: textDecoration,\n    letterSpacing: letterSpacing,\n    wordSpacing: wordSpacing,\n    kerning: kerning,\n    fontVariantLigatures: fontVariantLigatures,\n    fontFeatureSettings: fontFeatureSettings\n  }, function (p) {\n    return !_.isNil(p);\n  });\n  if (typeof font === \"string\") {\n    font = parseFontString(font);\n  }\n  return _.defaults(ownedFont, font);\n}\nexport default function (props) {\n  var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var TSpan = arguments.length > 2 ? arguments[2] : undefined;\n  var x = props.x,\n    y = props.y,\n    dx = props.dx,\n    dy = props.dy,\n    rotate = props.rotate,\n    baselineShift = props.baselineShift,\n    verticalAlign = props.verticalAlign,\n    alignmentBaseline = props.alignmentBaseline;\n  var children = props.children;\n  var content = null;\n  if (typeof children === \"string\" || typeof children === \"number\") {\n    var childrenString = children.toString();\n    if (container) {\n      children = _jsx(TSpan, {\n        children: childrenString\n      });\n    } else {\n      content = childrenString;\n      children = null;\n    }\n  } else if (Children.count(children) > 1 || Array.isArray(children)) {\n    children = Children.map(children, function (child) {\n      if (typeof child === \"string\" || typeof child === \"number\") {\n        return _jsx(TSpan, {\n          children: child.toString()\n        });\n      } else {\n        return child;\n      }\n    });\n  }\n  return {\n    content: content,\n    children: children,\n    baselineShift: baselineShift,\n    verticalAlign: verticalAlign,\n    alignmentBaseline: alignmentBaseline,\n    font: extractFont(props),\n    x: extractLengthList(x),\n    y: extractLengthList(y),\n    dx: extractLengthList(dx),\n    dy: extractLengthList(dy),\n    rotate: extractLengthList(rotate)\n  };\n}","map":{"version":3,"names":["_","React","Children","extractLengthList","jsx","_jsx","fontRegExp","fontFamilyPrefix","fontFamilySuffix","commaReg","cachedFontObjectsFromString","extractSingleFontFamily","fontFamilyString","split","replace","parseFontString","font","hasOwnProperty","match","exec","fontFamily","fontSize","isBold","isItalic","fontWeight","fontStyle","extractFont","prop","props","_objectSpread","style","fontData","fontVariant","fontStretch","textAnchor","textDecoration","letterSpacing","wordSpacing","kerning","fontVariantLigatures","fontFeatureSettings","ownedFont","pickBy","p","isNil","defaults","container","arguments","length","undefined","TSpan","x","y","dx","dy","rotate","baselineShift","verticalAlign","alignmentBaseline","children","content","childrenString","toString","count","Array","isArray","map","child"],"sources":["/home/davigtomaz/PI-3ano-ReactNative/node_modules/react-native-svg/lib/extract/extractText.js"],"sourcesContent":["import _ from \"lodash\";\n//noinspection JSUnresolvedVariable\nimport React, { Children } from \"react\";\nimport extractLengthList from \"./extractLengthList\";\n\nconst fontRegExp = /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?[ptexm%])*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nconst fontFamilyPrefix = /^[\\s\"']*/;\nconst fontFamilySuffix = /[\\s\"']*$/;\nconst commaReg = /\\s*,\\s*/g;\n\nconst cachedFontObjectsFromString = {};\n\nfunction extractSingleFontFamily(fontFamilyString) {\n    // SVG on the web allows for multiple font-families to be specified.\n    // For compatibility, we extract the first font-family, hoping\n    // we'll get a match.\n    return fontFamilyString\n        ? fontFamilyString\n              .split(commaReg)[0]\n              .replace(fontFamilyPrefix, \"\")\n              .replace(fontFamilySuffix, \"\")\n        : null;\n}\n\nfunction parseFontString(font) {\n    if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n        return cachedFontObjectsFromString[font];\n    }\n    const match = fontRegExp.exec(font);\n    if (!match) {\n        return null;\n    }\n    const fontFamily = extractSingleFontFamily(match[3]);\n    const fontSize = match[2] || \"12\";\n    const isBold = /bold/.exec(match[1]);\n    const isItalic = /italic/.exec(match[1]);\n    const fontWeight = isBold ? \"bold\" : \"normal\";\n    const fontStyle = isItalic ? \"italic\" : \"normal\";\n    cachedFontObjectsFromString[font] = {\n        fontSize,\n        fontFamily,\n        fontWeight,\n        fontStyle,\n    };\n    return cachedFontObjectsFromString[font];\n}\n\nexport function extractFont(prop) {\n    const props = { ...prop.style, ...prop };\n    const {\n        fontData,\n        fontStyle,\n        fontVariant,\n        fontWeight,\n        fontStretch,\n        textAnchor,\n        textDecoration,\n        letterSpacing,\n        wordSpacing,\n        kerning,\n        fontVariantLigatures,\n        fontFeatureSettings,\n    } = props;\n    let { fontSize, fontFamily, font } = props;\n\n    fontFamily = extractSingleFontFamily(fontFamily);\n    fontSize = fontSize ? \"\" + fontSize : null;\n\n    const ownedFont = _.pickBy(\n        {\n            fontData,\n            fontStyle,\n            fontVariant,\n            fontWeight,\n            fontStretch,\n            fontSize,\n            fontFamily,\n            textAnchor,\n            textDecoration,\n            letterSpacing,\n            wordSpacing,\n            kerning,\n            fontVariantLigatures,\n            fontFeatureSettings,\n        },\n        p => !_.isNil(p),\n    );\n\n    if (typeof font === \"string\") {\n        font = parseFontString(font);\n    }\n\n    return _.defaults(ownedFont, font);\n}\n\nexport default function(props, container = false, TSpan) {\n    const {\n        x,\n        y,\n        dx,\n        dy,\n        rotate,\n        baselineShift,\n        verticalAlign,\n        alignmentBaseline,\n    } = props;\n    let { children } = props;\n\n    let content = null;\n    if (typeof children === \"string\" || typeof children === \"number\") {\n        const childrenString = children.toString();\n        if (container) {\n            children = <TSpan>{childrenString}</TSpan>;\n        } else {\n            content = childrenString;\n            children = null;\n        }\n    } else if (Children.count(children) > 1 || Array.isArray(children)) {\n        children = Children.map(children, child => {\n            if (typeof child === \"string\" || typeof child === \"number\") {\n                return <TSpan>{child.toString()}</TSpan>;\n            } else {\n                return child;\n            }\n        });\n    }\n\n    return {\n        content,\n        children,\n        baselineShift,\n        verticalAlign,\n        alignmentBaseline,\n        font: extractFont(props),\n        x: extractLengthList(x),\n        y: extractLengthList(y),\n        dx: extractLengthList(dx),\n        dy: extractLengthList(dy),\n        rotate: extractLengthList(rotate),\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}