{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"inputButton\", \"onChangeText\", \"onChange\", \"value\", \"mask\", \"disabled\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { TextInput } from 'react-native-paper';\nvar splitCharacters = ['-', '/', '.', '年', ' '];\nfunction detectCharacter(mask) {\n  var c = splitCharacters.find(function (ch) {\n    return mask.includes(ch);\n  });\n  return c || '';\n}\nfunction escapeForRegExp(value) {\n  return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nfunction TextInputWithMask(_ref, ref) {\n  var inputButton = _ref.inputButton,\n    onChangeText = _ref.onChangeText,\n    _onChange = _ref.onChange,\n    value = _ref.value,\n    mask = _ref.mask,\n    disabled = _ref.disabled,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(value || ''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    controlledValue = _React$useState2[0],\n    setControlledValue = _React$useState2[1];\n  var onInnerChange = function onInnerChange(text) {\n    var splitCharacter = detectCharacter(mask);\n    var maskParts = mask.split(splitCharacter);\n    var trimmedText = text.trim();\n    var format = maskParts[0].toLowerCase() + splitCharacter + maskParts[1].toLowerCase() + splitCharacter + maskParts[2].toLowerCase();\n    var match = new RegExp(format.replace(/(\\w+)\\W(\\w+)\\W(\\w+)/, '^\\\\s*($1)\\\\W*($2)?\\\\W*($3)?([0-9]*).*').replace(/m|d|y/g, '\\\\d'));\n    var replaceValue = format.match(/\\W/);\n    var replace = (\"$1\" + splitCharacter + \"$2\" + splitCharacter + \"$3$4\").replace(new RegExp(escapeForRegExp(splitCharacter), 'g'), replaceValue != null ? replaceValue : '');\n    var isBackSpace = controlledValue.length > trimmedText.length;\n    if (!isBackSpace) {\n      trimmedText = trimmedText.replace(/(^|\\W)(?=\\d\\W)/g, '$10').replace(match, replace).replace(/(\\W)+/g, '$1');\n    }\n    if (trimmedText.length === mask.length) {\n      onChangeText && onChangeText(trimmedText);\n    }\n    setControlledValue(trimmedText);\n  };\n  React.useEffect(function () {\n    setControlledValue(value || '');\n  }, [value]);\n  return React.createElement(TextInput, _extends({\n    ref: ref\n  }, rest, {\n    disabled: disabled,\n    value: controlledValue,\n    onChangeText: onInnerChange,\n    onChange: function onChange(e) {\n      _onChange && _onChange(e);\n    },\n    maxLength: 10,\n    right: inputButton\n  }));\n}\nexport default React.forwardRef(TextInputWithMask);","map":{"version":3,"names":["React","TextInput","splitCharacters","detectCharacter","mask","c","find","ch","includes","escapeForRegExp","value","replace","TextInputWithMask","_ref","ref","inputButton","onChangeText","onChange","disabled","rest","_objectWithoutProperties","_excluded","_React$useState","useState","_React$useState2","_slicedToArray","controlledValue","setControlledValue","onInnerChange","text","splitCharacter","maskParts","split","trimmedText","trim","format","toLowerCase","match","RegExp","replaceValue","isBackSpace","length","useEffect","createElement","_extends","e","maxLength","right","forwardRef"],"sources":["/home/davigtomaz/PI-3ano-ReactNative/node_modules/react-native-paper-dates/src/TextInputMask.tsx"],"sourcesContent":["import * as React from 'react'\nimport { TextInput } from 'react-native-paper'\n\nconst splitCharacters = ['-', '/', '.', '年', ' ']\nfunction detectCharacter(mask: string): string {\n  const c = splitCharacters.find((ch) => mask.includes(ch))\n  return c || ''\n}\n\nfunction escapeForRegExp(value: string): string {\n  return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n}\n\nfunction TextInputWithMask(\n  {\n    inputButton,\n    onChangeText,\n    onChange,\n    value,\n    mask,\n    disabled,\n    ...rest\n  }: React.ComponentProps<typeof TextInput> & {\n    mask: string\n    value: string\n    inputButton: React.ReactNode\n  },\n  ref: any\n) {\n  const [controlledValue, setControlledValue] = React.useState<string>(\n    value || ''\n  )\n\n  const onInnerChange = (text: string) => {\n    const splitCharacter = detectCharacter(mask)\n    const maskParts = mask.split(splitCharacter)\n\n    let trimmedText = text.trim()\n    const format =\n      maskParts[0].toLowerCase() +\n      splitCharacter +\n      maskParts[1].toLowerCase() +\n      splitCharacter +\n      maskParts[2].toLowerCase()\n    const match = new RegExp(\n      format\n        .replace(/(\\w+)\\W(\\w+)\\W(\\w+)/, '^\\\\s*($1)\\\\W*($2)?\\\\W*($3)?([0-9]*).*')\n        .replace(/m|d|y/g, '\\\\d')\n    )\n    const replaceValue = format.match(/\\W/)\n    const replace = `$1${splitCharacter}$2${splitCharacter}$3$4`.replace(\n      new RegExp(escapeForRegExp(splitCharacter), 'g'),\n      (replaceValue ?? '') as string\n    )\n\n    const isBackSpace = controlledValue.length > trimmedText.length\n\n    if (!isBackSpace) {\n      trimmedText = trimmedText\n        .replace(/(^|\\W)(?=\\d\\W)/g, '$10')\n        .replace(match, replace)\n        .replace(/(\\W)+/g, '$1')\n    }\n\n    if (trimmedText.length === mask.length) {\n      onChangeText && onChangeText(trimmedText)\n    }\n\n    setControlledValue(trimmedText)\n  }\n\n  React.useEffect(() => {\n    setControlledValue(value || '')\n  }, [value])\n\n  return (\n    <TextInput\n      ref={ref}\n      {...rest}\n      disabled={disabled}\n      value={controlledValue}\n      onChangeText={onInnerChange}\n      onChange={(e) => {\n        onChange && onChange(e)\n      }}\n      maxLength={10}\n      right={inputButton}\n    />\n  )\n}\n\nexport default React.forwardRef(TextInputWithMask)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}