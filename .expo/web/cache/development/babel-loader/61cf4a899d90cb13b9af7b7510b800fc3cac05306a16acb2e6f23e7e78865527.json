{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper';\nimport { useMemo } from 'react';\nimport Color from 'color';\nimport { inputTypes, useSwitchColors } from \"./timeUtils\";\nimport { DisplayModeContext } from \"../contexts/DisplayModeContext\";\nexport default function AmPmSwitcher(_ref) {\n  var onChange = _ref.onChange,\n    hours = _ref.hours,\n    inputType = _ref.inputType;\n  var _React$useContext = React.useContext(DisplayModeContext),\n    setMode = _React$useContext.setMode,\n    mode = _React$useContext.mode;\n  var theme = useTheme();\n  var backgroundColor = useMemo(function () {\n    if (theme.isV3) {\n      return theme.colors.outline;\n    }\n    return Color(theme.dark ? Color(theme.colors.surface).lighten(1.2).hex() : theme.colors.surface).darken(0.1).hex();\n  }, [theme]);\n  var isAM = mode === 'AM';\n  return React.createElement(View, {\n    style: [styles.root, {\n      borderColor: backgroundColor,\n      borderRadius: theme.roundness * 2,\n      height: inputType === inputTypes.keyboard ? 72 : 80,\n      marginBottom: inputType === 'keyboard' ? 24 : 0\n    }]\n  }, React.createElement(SwitchButton, {\n    label: \"AM\",\n    onPress: function onPress() {\n      setMode('AM');\n      if (hours - 12 >= 0) {\n        onChange(hours - 12);\n      }\n    },\n    selected: isAM,\n    disabled: isAM\n  }), React.createElement(View, {\n    style: [styles.switchSeparator, {\n      backgroundColor: backgroundColor\n    }]\n  }), React.createElement(SwitchButton, {\n    label: \"PM\",\n    onPress: function onPress() {\n      setMode('PM');\n      if (hours + 12 <= 24) {\n        onChange(hours + 12);\n      }\n    },\n    selected: !isAM,\n    disabled: !isAM\n  }));\n}\nfunction SwitchButton(_ref2) {\n  var label = _ref2.label,\n    onPress = _ref2.onPress,\n    selected = _ref2.selected,\n    disabled = _ref2.disabled;\n  var theme = useTheme();\n  var _useSwitchColors = useSwitchColors(selected),\n    backgroundColor = _useSwitchColors.backgroundColor,\n    color = _useSwitchColors.color;\n  var textFont = theme !== null && theme !== void 0 && theme.isV3 ? theme.fonts.titleMedium : theme.fonts.medium;\n  return React.createElement(TouchableRipple, {\n    onPress: onPress,\n    style: styles.switchButton,\n    accessibilityLabel: label,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled\n  }, React.createElement(View, {\n    style: [styles.switchButtonInner, {\n      backgroundColor: backgroundColor\n    }]\n  }, React.createElement(Text, {\n    maxFontSizeMultiplier: 1.5,\n    selectable: false,\n    style: [_objectSpread(_objectSpread({}, textFont), {}, {\n      color: color\n    })]\n  }, label)));\n}\nvar styles = StyleSheet.create({\n  root: {\n    width: 52,\n    borderWidth: 1,\n    overflow: 'hidden'\n  },\n  switchSeparator: {\n    height: 1,\n    width: 52\n  },\n  switchButton: {\n    flex: 1\n  },\n  switchButtonInner: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["React","View","StyleSheet","Text","TouchableRipple","useTheme","useMemo","Color","inputTypes","useSwitchColors","DisplayModeContext","AmPmSwitcher","_ref","onChange","hours","inputType","_React$useContext","useContext","setMode","mode","theme","backgroundColor","isV3","colors","outline","dark","surface","lighten","hex","darken","isAM","createElement","style","styles","root","borderColor","borderRadius","roundness","height","keyboard","marginBottom","SwitchButton","label","onPress","selected","disabled","switchSeparator","_ref2","_useSwitchColors","color","textFont","fonts","titleMedium","medium","switchButton","accessibilityLabel","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","switchButtonInner","maxFontSizeMultiplier","selectable","_objectSpread","create","width","borderWidth","overflow","flex","alignItems","justifyContent"],"sources":["/home/davigtomaz/PI-3ano-ReactNative/node_modules/react-native-paper-dates/src/Time/AmPmSwitcher.tsx"],"sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { MD2Theme, Text, TouchableRipple, useTheme } from 'react-native-paper'\nimport { useMemo } from 'react'\nimport Color from 'color'\nimport { inputTypes, PossibleInputTypes, useSwitchColors } from './timeUtils'\nimport { DisplayModeContext } from '../contexts/DisplayModeContext'\n\nexport default function AmPmSwitcher({\n  onChange,\n  hours,\n  inputType,\n}: {\n  hours: number\n  onChange: (newHours: number) => any\n  inputType: PossibleInputTypes\n}) {\n  const { setMode, mode } = React.useContext(DisplayModeContext)\n  const theme = useTheme()\n  const backgroundColor = useMemo<string>(() => {\n    if (theme.isV3) {\n      return theme.colors.outline\n    }\n    return Color(\n      theme.dark\n        ? Color(theme.colors.surface).lighten(1.2).hex()\n        : theme.colors.surface\n    )\n      .darken(0.1)\n      .hex()\n  }, [theme])\n\n  const isAM = mode === 'AM'\n  return (\n    <View\n      style={[\n        styles.root,\n        // eslint-disable-next-line react-native/no-inline-styles\n        {\n          borderColor: backgroundColor,\n          borderRadius: theme.roundness * 2,\n          height: inputType === inputTypes.keyboard ? 72 : 80,\n          marginBottom: inputType === 'keyboard' ? 24 : 0,\n        },\n      ]}\n    >\n      <SwitchButton\n        label=\"AM\"\n        onPress={() => {\n          setMode('AM')\n          if (hours - 12 >= 0) {\n            onChange(hours - 12)\n          }\n        }}\n        selected={isAM}\n        disabled={isAM}\n      />\n      <View style={[styles.switchSeparator, { backgroundColor }]} />\n      <SwitchButton\n        label=\"PM\"\n        onPress={() => {\n          setMode('PM')\n          if (hours + 12 <= 24) {\n            onChange(hours + 12)\n          }\n        }}\n        selected={!isAM}\n        disabled={!isAM}\n      />\n    </View>\n  )\n}\n\nfunction SwitchButton({\n  label,\n  onPress,\n  selected,\n  disabled,\n}: {\n  label: string\n  onPress: (() => any) | undefined\n  selected: boolean\n  disabled: boolean\n}) {\n  const theme = useTheme()\n  const { backgroundColor, color } = useSwitchColors(selected)\n\n  let textFont = theme?.isV3\n    ? theme.fonts.titleMedium\n    : (theme as any as MD2Theme).fonts.medium\n\n  return (\n    <TouchableRipple\n      onPress={onPress}\n      style={styles.switchButton}\n      accessibilityLabel={label}\n      // @ts-ignore old React Native versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      // @ts-ignore old React Native versions\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n    >\n      <View style={[styles.switchButtonInner, { backgroundColor }]}>\n        <Text\n          maxFontSizeMultiplier={1.5}\n          selectable={false}\n          style={[\n            {\n              ...textFont,\n              color: color,\n            },\n          ]}\n        >\n          {label}\n        </Text>\n      </View>\n    </TouchableRipple>\n  )\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    width: 52,\n    borderWidth: 1,\n    overflow: 'hidden',\n  },\n  switchSeparator: {\n    height: 1,\n    width: 52,\n  },\n  switchButton: {\n    flex: 1,\n  },\n  switchButtonInner: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}