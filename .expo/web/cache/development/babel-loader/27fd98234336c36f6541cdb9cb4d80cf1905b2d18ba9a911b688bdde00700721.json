{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"orientation\", \"thickness\", \"color\", \"style\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { useMemo } from 'react';\nimport Box from \"./Box\";\nvar Divider = function Divider(_ref) {\n  var _ref$orientation = _ref.orientation,\n    orientation = _ref$orientation === void 0 ? 'horizontal' : _ref$orientation,\n    _ref$thickness = _ref.thickness,\n    thickness = _ref$thickness === void 0 ? 1 : _ref$thickness,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? '#E0E0E0' : _ref$color,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var dividerStyle = useMemo(function () {\n    if (orientation === 'horizontal') return {\n      height: thickness,\n      backgroundColor: color\n    };else return {\n      width: thickness,\n      backgroundColor: color\n    };\n  }, [orientation, thickness, color]);\n  return React.createElement(Box, _extends({\n    style: [dividerStyle, style]\n  }, rest));\n};\nexport default Divider;","map":{"version":3,"names":["React","useMemo","Box","Divider","_ref","_ref$orientation","orientation","_ref$thickness","thickness","_ref$color","color","style","rest","_objectWithoutProperties","_excluded","dividerStyle","height","backgroundColor","width","createElement","_extends"],"sources":["/home/davigtomaz/PI-3ano-ReactNative/node_modules/react-native-flex-layout/lib/module/Divider.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport type { BoxProps } from './Box';\nimport Box from './Box';\n\nexport interface DividerProps extends BoxProps {\n  /**\n   * The orientation of the divider.\n   *\n   * @default 'horizontal'\n   */\n  orientation?: 'horizontal' | 'vertical';\n\n  /**\n   * The thickness of the divider.\n   *\n   * @default 1\n   */\n  thickness?: number;\n\n  /**\n   * The color of the divider.\n   *\n   * @default '#E0E0E0'\n   */\n  color?: string;\n}\n\nconst Divider: React.FC<DividerProps> = ({\n  orientation = 'horizontal',\n  thickness = 1,\n  color = '#E0E0E0',\n  style,\n  ...rest\n}) => {\n  const dividerStyle = useMemo(() => {\n    if (orientation === 'horizontal')\n      return { height: thickness, backgroundColor: color };\n    else return { width: thickness, backgroundColor: color };\n  }, [orientation, thickness, color]);\n\n  return <Box style={[dividerStyle, style]} {...rest} />;\n};\n\nexport default Divider;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAEA,OAAOC,GAAP;AAyBA,IAAMC,OAA+B,GAAG,SAAlCA,OAA+BA,CAAGC,IAAA,EAMlC;EAAA,IAAAC,gBAAA,GAAAD,IAAA,CALJE,WAAW;IAAXA,WAAW,GAAAD,gBAAA,cAAG,YADyB,GAAAA,gBAAA;IAAAE,cAAA,GAMnCH,IAAA,CAJJI,SAAS;IAATA,SAAS,GAAAD,cAAA,cAAG,CAF2B,GAAAA,cAAA;IAAAE,UAAA,GAMnCL,IAAA,CAHJM,KAAK;IAALA,KAAK,GAAAD,UAAA,cAAG,SAH+B,GAAAA,UAAA;IAIvCE,KAJuC,GAMnCP,IAAA,CAFJO,KAJuC;IAKpCC,IAAA,GAAAC,wBAAA,CACCT,IAAA,EAAAU,SAAA;EACJ,IAAMC,YAAY,GAAGd,OAAO,CAAC,YAAM;IACjC,IAAIK,WAAW,KAAK,YAApB,EACE,OAAO;MAAEU,MAAM,EAAER,SAAV;MAAqBS,eAAe,EAAEP;IAAtC,CAAP,CADF,KAEK,OAAO;MAAEQ,KAAK,EAAEV,SAAT;MAAoBS,eAAe,EAAEP;IAArC,CAAP;EACN,CAJ2B,EAIzB,CAACJ,WAAD,EAAcE,SAAd,EAAyBE,KAAzB,CAJyB,CAA5B;EAMA,OAAOV,KAAA,CAAAmB,aAAA,CAACjB,GAAD,EAAAkB,QAAA;IAAKT,KAAK,EAAE,CAACI,YAAD,EAAeJ,KAAf;EAAZ,GAAuCC,IAAvC,EAAP;AACD,CAdD;AAgBA,eAAeT,OAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}